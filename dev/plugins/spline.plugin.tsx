import type { PluginContext } from './types'
import type * as core from '../../src'
import type { Command } from '../commands/command'
import type * as model from '../models/model'
import bspline from 'b-spline'
import type { LineContent } from './line-polyline.plugin'

export type SplineContent = model.BaseContent<'spline'> & model.StrokeFields & {
  points: core.Position[]
  fitting?: boolean
}

export function getModel(ctx: PluginContext): model.Model<SplineContent> {
  function getSplineGeometries(content: Omit<SplineContent, "type">) {
    return ctx.getGeometriesFromCache(content, () => {
      const inputPoints = content.points.map((p) => [p.x, p.y])
      let points: core.Position[] = []
      if (inputPoints.length > 2) {
        if (content.fitting) {
          const controlPoints = ctx.getBezierSplineControlPointsOfPoints(content.points)
          for (let i = 0; i < controlPoints.length; i++) {
            points.push(
              content.points[i],
              ...ctx.getBezierCurvePoints(content.points[i], ...controlPoints[i], content.points[i + 1], splineSegmentCount),
            )
          }
          points.push(content.points[content.points.length - 1])
        } else {
          const degree = 2
          const knots: number[] = []
          for (let i = 0; i < inputPoints.length + degree + 1; i++) {
            if (i < degree + 1) {
              knots.push(0)
            } else if (i < inputPoints.length) {
              knots.push(i - degree)
            } else {
              knots.push(inputPoints.length - degree)
            }
          }
          for (let t = 0; t <= splineSegmentCount; t++) {
            const p = bspline(t / splineSegmentCount, degree, inputPoints, knots)
            points.push({ x: p[0], y: p[1] })
          }
        }
      } else {
        points = content.points
      }
      return {
        lines: Array.from(ctx.iteratePolylineLines(points)),
        points,
        bounding: ctx.getPointsBounding(points),
        renderingLines: ctx.dashedPolylineToLines(points, content.dashArray),
      }
    })
  }
  const React = ctx.React
  return {
    type: 'spline',
    ...ctx.strokeModel,
    move(content, offset) {
      for (const point of content.points) {
        point.x += offset.x
        point.y += offset.y
      }
    },
    rotate(content, center, angle) {
      content.points = content.points.map((p) => ctx.rotatePositionByCenter(p, center, -angle))
    },
    mirror(content, line) {
      content.points = content.points.map((p) => ctx.getSymmetryPoint(p, line))
    },
    render({ content, color, target, strokeWidth }) {
      const { points } = getSplineGeometries(content)
      return target.renderPolyline(points, { strokeColor: color, dashArray: content.dashArray, strokeWidth })
    },
    renderIfSelected({ content, color, target, strokeWidth }) {
      return target.renderPolyline(content.points, { strokeColor: color, dashArray: [4], strokeWidth })
    },
    getOperatorRenderPosition(content) {
      return content.points[0]
    },
    getEditPoints(content) {
      return ctx.getEditPointsFromCache(content, () => ({ editPoints: ctx.getPolylineEditPoints(content, isSplineContent, false, true) }))
    },
    getSnapPoints(content) {
      return ctx.getSnapPointsFromCache(content, () => content.points.map((p) => ({ ...p, type: 'endpoint' as const })))
    },
    getGeometries: getSplineGeometries,
    propertyPanel(content, update) {
      return {
        points: <ctx.ArrayEditor
          inline
          {...ctx.getArrayEditorProps<core.Position, typeof content>(v => v.points, { x: 0, y: 0 }, (v) => update(c => { if (isSplineContent(c)) { v(c) } }))}
          items={content.points.map((f, i) => <ctx.ObjectEditor
            inline
            properties={{
              x: <ctx.NumberEditor value={f.x} setValue={(v) => update(c => { if (isSplineContent(c)) { c.points[i].x = v } })} />,
              y: <ctx.NumberEditor value={f.y} setValue={(v) => update(c => { if (isSplineContent(c)) { c.points[i].y = v } })} />,
            }}
          />)}
        />,
        fitting: <ctx.BooleanEditor value={content.fitting === true} setValue={(v) => update(c => { if (isSplineContent(c)) { c.fitting = v ? true : undefined } })} />,
        ...ctx.getStrokeContentPropertyPanel(content, update),
      }
    },
  }
}

export function isSplineContent(content: model.BaseContent): content is SplineContent {
  return content.type === 'spline'
}

const splineSegmentCount = 100

export function getCommand(ctx: PluginContext): Command {
  const React = ctx.React
  const icon1 = (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
      <circle cx="13" cy="22" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <circle cx="28" cy="79" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <circle cx="63" cy="22" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <circle cx="85" cy="80" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <polyline points="13,22 13.601,24.2458 14.204,26.423199999999998 14.808999999999997,28.5322 15.416000000000002,30.5728 16.025000000000002,32.545 16.636,34.4488 17.249,36.2842 17.864,38.0512 18.481,39.74980000000001 19.1,41.38000000000001 19.721,42.9418 20.344,44.435199999999995 20.968999999999998,45.860200000000006 21.595999999999997,47.2168 22.225,48.50499999999999 22.856,49.7248 23.489,50.8762 24.124,51.959199999999996 24.761000000000003,52.9738 25.4,53.92 26.041000000000004,54.7978 26.684000000000005,55.607200000000006 27.329000000000004,56.348200000000006 27.976,57.020799999999994 28.625,57.625 29.275999999999996,58.1608 29.929000000000002,58.62820000000001 30.583999999999996,59.02719999999999 31.241,59.3578 31.9,59.620000000000005 32.561,59.8138 33.224000000000004,59.9392 33.888999999999996,59.99619999999999 34.556,59.98479999999999 35.224999999999994,59.905 35.896,59.7568 36.569,59.5402 37.244,59.255199999999995 37.921,58.9018 38.6,58.480000000000004 39.281,57.98980000000001 39.964000000000006,57.431200000000004 40.648999999999994,56.80420000000001 41.336,56.1088 42.025,55.345 42.716,54.5128 43.409000000000006,53.61220000000001 44.104,52.6432 44.80100000000001,51.6058 45.5,50.5 46.2018,49.3946 46.907199999999996,48.358399999999996 47.6162,47.3914 48.32880000000001,46.493599999999994 49.045,45.665 49.76480000000001,44.90559999999999 50.48819999999999,44.21540000000001 51.215199999999996,43.5944 51.94579999999999,43.0426 52.68,42.559999999999995 53.4178,42.1466 54.159200000000006,41.8024 54.9042,41.5274 55.6528,41.3216 56.405,41.185 57.16080000000001,41.117599999999996 57.92020000000001,41.1194 58.683200000000014,41.1904 59.449799999999996,41.3306 60.22,41.54 60.99379999999999,41.8186 61.77120000000001,42.166399999999996 62.5522,42.5834 63.3368,43.0696 64.125,43.625 64.9168,44.2496 65.7122,44.9434 66.5112,45.7064 67.3138,46.5386 68.12,47.44 68.9298,48.4106 69.74319999999999,49.450399999999995 70.5602,50.5594 71.3808,51.73759999999999 72.20499999999998,52.985 73.03280000000001,54.301599999999986 73.8642,55.6874 74.6992,57.142399999999995 75.5378,58.66660000000001 76.38,60.260000000000005 77.22579999999999,61.9226 78.0752,63.654399999999995 78.9282,65.45540000000001 79.7848,67.32559999999998 80.645,69.265 81.5088,71.2736 82.37619999999998,73.3514 83.24719999999999,75.49839999999999 84.12180000000001,77.7146 85,80" strokeWidth="5" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="none" stroke="currentColor"></polyline>
    </svg>
  )
  const icon2 = (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
      <circle cx="13" cy="22" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <circle cx="28" cy="79" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <circle cx="63" cy="22" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <circle cx="85" cy="80" r="5" strokeWidth="0" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="currentColor" stroke="currentColor"></circle>
      <polyline points="13,22 13.0880062,22.9506286 13.1760496,23.9010288 13.264167399999998,24.8509722 13.3523968,25.800230400000004 13.440775,26.748575 13.5293392,27.6957776 13.6181266,28.641609800000005 13.7071744,29.5858432 13.796519799999999,30.5282494 13.886199999999999,31.468600000000002 13.9762522,32.4066666 14.0667136,33.3422208 14.157621400000002,34.27503420000001 14.249012800000003,35.2048784 14.340924999999999,36.131525 14.4333952,37.0547456 14.5264606,37.974311799999995 14.620158400000001,38.8899952 14.714525799999999,39.8015674 14.8096,40.7088 14.9054182,41.6114646 15.0020176,42.509332799999996 15.0994354,43.4021762 15.197708800000001,44.2897664 15.296875000000002,45.171875 15.396971200000001,46.0482736 15.4980346,46.918733800000005 15.600102399999999,47.7830272 15.7032118,48.6409254 15.8074,49.4922 15.912704199999999,50.336622600000005 16.0191616,51.1739648 16.1268094,52.003998200000005 16.2356848,52.8264944 16.345825,53.641225000000006 16.4572672,54.4479616 16.5700486,55.2464758 16.6842064,56.0365392 16.7997778,56.817923400000005 16.9168,57.590399999999995 17.035310199999998,58.353740599999995 17.155345599999997,59.107716800000006 17.2769434,59.852100199999995 17.4001408,60.58666240000001 17.524975,61.311175000000006 17.6514832,62.0254096 17.7797026,62.729137800000004 17.9096704,63.422131199999995 18.0414238,64.10416140000001 18.174999999999997,64.775 18.310436199999998,65.4344186 18.4477696,66.0821888 18.5870374,66.7180822 18.7282768,67.3418704 18.871525,67.953325 19.0168192,68.5522176 19.1641966,69.13831979999999 19.313694400000003,69.7114032 19.4653498,70.2712394 19.6192,70.8176 19.7752822,71.35025660000001 19.9336336,71.8689808 20.0942914,72.3735442 20.2572928,72.86371840000001 20.422675,73.339275 20.5904752,73.7999856 20.7607306,74.24562180000001 20.933478400000002,74.6759552 21.1087558,75.0907574 21.2866,75.4898 21.467048199999997,75.8728546 21.6501376,76.2396928 21.835905399999998,76.59008619999999 22.0243888,76.92380639999999 22.215625,77.240625 22.4096512,77.54031359999999 22.6065046,77.8226438 22.8062224,78.08738720000001 23.008841800000003,78.33431540000001 23.214399999999998,78.56320000000001 23.4229342,78.7738126 23.6344816,78.9659248 23.8490794,79.1393082 24.0667648,79.2937344 24.287575,79.428975 24.511547200000003,79.5448016 24.7387186,79.64098580000001 24.9691264,79.7172992 25.202807800000002,79.77351340000001 25.439799999999998,79.80940000000001 25.6801402,79.8247306 25.923865600000003,79.8192768 26.171013400000003,79.79281019999999 26.421620799999996,79.7451024 26.675725,79.675925 26.933363200000002,79.5850496 27.1945726,79.47224779999999 27.4593904,79.3372912 27.727853800000002,79.1799514 28,79 28.275849,78.797323 28.555352,78.57226399999999 28.838443,78.325281 29.125056,78.05683200000001 29.415125,77.767375 29.708584,77.457368 30.005367,77.127269 30.305408,76.777536 30.608641,76.408627 30.915,76.021 31.224419,75.615113 31.536832,75.19142400000001 31.852173,74.75039100000001 32.170376,74.292472 32.491375,73.818125 32.815104,73.327808 33.141497,72.821979 33.470487999999996,72.301096 33.802011,71.76561699999999 34.136,71.216 34.472389,70.652703 34.811112,70.076184 35.152103000000004,69.486901 35.495296,68.885312 35.840625,68.271875 36.188024,67.647048 36.537427,67.011289 36.888768,66.365056 37.241980999999996,65.70880700000001 37.596999999999994,65.043 37.953759000000005,64.368093 38.312191999999996,63.684544 38.672233000000006,62.992810999999996 39.033815999999995,62.29335199999999 39.396875,61.586625000000005 39.761344,60.873087999999996 40.127157,60.153199 40.494248,59.42741600000001 40.862550999999996,58.696197 41.232,57.96 41.602529000000004,57.219283 41.97407199999999,56.474503999999996 42.346563,55.72612099999999 42.719936000000004,54.974592 43.094125,54.22037499999999 43.469063999999996,53.463927999999996 43.844687,52.705709 44.220928,51.946176 44.597721,51.185787000000005 44.974999999999994,50.425 45.352699,49.664272999999994 45.730752,48.904064 46.109093,48.144830999999996 46.487656,47.387032 46.866375000000005,46.631125 47.245184,45.877568 47.624016999999995,45.126819000000005 48.002808,44.379336 48.381491,43.635577 48.760000000000005,42.896 49.138268999999994,42.161063 49.516232,41.431224 49.893823000000005,40.706941 50.270976000000005,39.988672 50.647625,39.276875 51.023704,38.572008 51.399147,37.874528999999995 51.773888,37.184895999999995 52.147861,36.503567000000004 52.521,35.831 52.893239,35.167653 53.264511999999996,34.513984 53.634753,33.870451 54.003896,33.237512 54.371875,32.615625 54.738624,32.005247999999995 55.104077000000004,31.406838999999998 55.468168000000006,30.820856 55.830831,30.247757 56.19200000000001,29.687999999999995 56.551609,29.142042999999997 56.909591999999996,28.610344000000005 57.265883,28.093361 57.620416,27.591552 57.973124999999996,27.105375 58.323944,26.635288 58.672807,26.181749 59.019648000000004,25.745216 59.364401,25.326147 59.706999999999994,24.924999999999997 60.047379,24.542232999999996 60.385472,24.178303999999997 60.721213,23.833670999999995 61.054536000000006,23.508792 61.385374999999996,23.204124999999998 61.713664,22.920128000000002 62.039336999999996,22.657258999999996 62.362328,22.415976 62.682571,22.196737000000002 63,22 63.3145648,21.8261084 63.626278400000004,21.674947200000002 63.9351696,21.5462868 64.24126720000001,21.439897600000002 64.54459999999999,21.35555 64.8451968,21.2930144 65.14308639999999,21.252061199999996 65.4382976,21.2324608 65.7308592,21.2339836 66.02080000000001,21.2564 66.3081488,21.2994804 66.59293439999999,21.3629952 66.8751856,21.446714800000002 67.15493120000001,21.550409600000002 67.4322,21.67385 67.7070208,21.8168064 67.97942239999999,21.979049200000002 68.2494336,22.1603488 68.5170832,22.3604756 68.7824,22.5792 69.04541280000001,22.8162924 69.3061504,23.071523199999998 69.5646416,23.3446628 69.8209152,23.635481600000002 70.075,23.94375 70.3269248,24.269238400000003 70.57671839999999,24.6117172 70.8244096,24.970956800000003 71.0700272,25.3467276 71.3136,25.7388 71.55515679999999,26.1469444 71.7947264,26.5709312 72.03233759999999,27.010530800000005 72.2680192,27.4655136 72.50179999999999,27.935650000000003 72.73370879999999,28.4207104 72.9637744,28.9204652 73.19202560000001,29.4346848 73.4184912,29.9631396 73.64320000000001,30.505600000000005 73.86618080000001,31.0618364 74.08746239999999,31.631619200000003 74.3070736,32.2147188 74.5250432,32.8109056 74.7414,33.41995 74.9561728,34.0416224 75.16939039999998,34.6756932 75.38108159999999,35.3219328 75.5912752,35.9801116 75.80000000000001,36.65 76.00728480000001,37.3313684 76.2131584,38.02398720000001 76.4176496,38.72762680000001 76.62078720000001,39.442057600000005 76.82260000000001,40.16705 77.02311680000001,40.9023744 77.2223664,41.647801199999996 77.4203776,42.4031008 77.6171792,43.1680436 77.8128,43.94239999999999 78.00726879999999,44.7259404 78.20061439999999,45.51843519999999 78.3928656,46.319654799999995 78.58405119999999,47.129369600000004 78.77420000000001,47.94735 78.96334080000001,48.773366400000015 79.15150240000001,49.60718920000001 79.3387136,50.44858880000001 79.5250032,51.297335600000004 79.7104,52.1532 79.8949328,53.0159524 80.0786304,53.8853632 80.2615216,54.7612028 80.44363519999999,55.643241599999996 80.625,56.53124999999999 80.8056448,57.42499839999999 80.98559839999999,58.324257200000005 81.1648896,59.228796800000005 81.3435472,60.138387600000016 81.5216,61.05280000000001 81.69907680000001,61.97180440000001 81.87600640000001,62.89517120000001 82.0524176,63.822670800000004 82.22833920000001,64.7540736 82.4038,65.68915 82.5788288,66.6276704 82.7534544,67.5694052 82.9277056,68.51412479999999 83.1016112,69.4615996 83.2752,70.41159999999999 83.44850079999999,71.36389639999999 83.62154239999998,72.31825920000001 83.7943536,73.2744588 83.96696320000001,74.2322656 84.13940000000001,75.19144999999997 84.3116928,76.1517824 84.4838704,77.1130332 84.6559616,78.07497280000001 84.8279952,79.0373716 85,80" strokeWidth="5" strokeMiterlimit="10" strokeLinejoin="miter" strokeLinecap="butt" fill="none" stroke="currentColor"></polyline>
    </svg>
  )
  return {
    name: 'create spline',
    type: [
      { name: 'spline', hotkey: 'SPL', icon: icon1 },
      { name: 'spline fitting', icon: icon2 },
    ],
    useCommand({ onEnd, type, scale }) {
      const { line, onClick, onMove, input, lastPosition, reset } = ctx.useLineClickCreate(
        type === 'spline' || type === 'spline fitting',
        (c) => onEnd({
          updateContents: (contents) => contents.push({ points: c, type: 'spline', fitting: type === 'spline fitting' } as SplineContent)
        }),
      )
      const assistentContents: (SplineContent | LineContent)[] = []
      if (line) {
        assistentContents.push(
          { points: line, type: 'spline', fitting: type === 'spline fitting' },
          { points: line, type: 'polyline', dashArray: [4 / scale] }
        )
      }
      return {
        onStart: onClick,
        input,
        onMove,
        assistentContents,
        lastPosition,
        reset,
      }
    },
    selectCount: 0,
  }
}
